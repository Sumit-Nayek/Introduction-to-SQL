### intermediate level ###
# Query 1: Using a Subquery in the WHERE clause
Q1. Find books priced higher than the average book price to identify premium-priced books.
SELECT title, price
FROM books
WHERE price > (SELECT AVG(price) FROM books);

# Query 2: Using CASE for conditional logic
Q2. Categorize books into price tiers (Budget, Standard, Premium) based on their price for marketing purposes.
SELECT title, price,
       CASE 
           WHEN price < 15 THEN 'Budget'
           WHEN price BETWEEN 15 AND 30 THEN 'Standard'
           ELSE 'Premium'
       END AS price_tier
FROM books;

# Query 3: Using LEFT JOIN to include all records
Q3. List all authors and any books theyâ€™ve written, including authors without books, to identify unpublished authors.
SELECT a.author_name, b.title
FROM authors a
LEFT JOIN books b ON a.author_id = b.author_id;

# Query 4: Using HAVING with GROUP BY
Q4. Find books that have sold more than 100 units in total to highlight bestsellers.
SELECT b.title, SUM(s.quantity) AS total_sold
FROM books b
JOIN sales s ON b.book_id = s.book_id
GROUP BY b.title
HAVING SUM(s.quantity) > 100;

# Query 5: Using Date Functions
Q5. Find total sales for each book in the last 30 days to analyze recent performance.
SELECT b.title, SUM(s.quantity) AS recent_sales
FROM books b
JOIN sales s ON b.book_id = s.book_id
WHERE s.sale_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
GROUP BY b.title;

# Query 6: Using a Subquery in the SELECT clause
Q6. For each book, show its price and the percentage it contributes to the total book inventory value.
SELECT title, price,
       (price / (SELECT SUM(price) FROM books) * 100) AS percentage_of_total_value
FROM books;

# Query 7: Combining Multiple JOINs
Q7. Retrieve sales details including book titles and author names for a comprehensive sales report.
SELECT s.sale_id, b.title, a.author_name, s.quantity, s.sale_date
FROM sales s
JOIN books b ON s.book_id = b.book_id
JOIN authors a ON b.author_id = a.author_id;

# Query 8: Using EXISTS for correlated subqueries
Q8. Find authors who have written books published after 2020 to promote new releases.
SELECT a.author_name
FROM authors a
WHERE EXISTS (
    SELECT 1
    FROM books b
    WHERE b.author_id = a.author_id
    AND b.publication_year > 2020
);
